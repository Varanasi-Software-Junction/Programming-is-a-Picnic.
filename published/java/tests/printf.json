[
    {
        "question": "What will be the result of the expression: 10 + 5 * 2?",
        "options": ["20", "30", "15", "None of the above"],
        "answer": 0,
        "explanation": "In Java, the '*' operator has higher precedence than '+'. Hence, `5 * 2` is evaluated first, giving 10, which is then added to 10, resulting in 20."
    },
    {
        "question": "What does the following code print?\n```java\nboolean result = (5 > 3) && (8 < 10);\nSystem.out.println(result);\n```",
        "options": ["true", "false", "5 > 3 && 8 < 10", "None of the above"],
        "answer": 0,
        "explanation": "The expression evaluates to 'true' because both conditions `5 > 3` and `8 < 10` are true, and `&&` (logical AND) returns true if both conditions are true."
    },
    {
        "question": "What will the following code print?\n```java\nint x = 5;\nif (x > 10) {\n    System.out.println(\"Greater\");\n} else {\n    System.out.println(\"Smaller or Equal\");\n}\n```",
        "options": ["Greater", "Smaller or Equal", "Error", "None of the above"],
        "answer": 1,
        "explanation": "Since the value of `x` (5) is not greater than 10, the `else` block is executed, and 'Smaller or Equal' is printed."
    },
    {
        "question": "How can you rewrite the following code using a ternary operator?\n```java\nint max = (a > b) ? a : b;\n```",
        "options": [
            "if (a > b) { max = a; } else { max = b; }",
            "if (a < b) { max = a; } else { max = b; }",
            "int max = (a < b) ? a : b;",
            "Ternary operator cannot be used here"
        ],
        "answer": 0,
        "explanation": "The ternary operator `(a > b) ? a : b;` assigns 'a' to `max` if `a > b`, otherwise it assigns 'b'. The equivalent if-else statement is: `if (a > b) { max = a; } else { max = b; }`."
    },
    {
        "question": "What will the following code print?\n```java\nint a = 5, b = 10;\nSystem.out.println(a + b * 2);\n```",
        "options": ["30", "25", "20", "15"],
        "answer": 1,
        "explanation": "Operator precedence dictates that `*` is evaluated before `+`. So, `b * 2 = 20`, and then `a + 20 = 25`."
    },
    {
        "question": "What will the following code print?\n```java\nint num = 3;\nswitch(num) {\n    case 1:\n        System.out.println(\"One\");\n        break;\n    case 3:\n        System.out.println(\"Three\");\n        break;\n    default:\n        System.out.println(\"Other\");\n}\n```",
        "options": ["One", "Three", "Other", "Error"],
        "answer": 1,
        "explanation": "The value of `num` matches the case `3`, so 'Three' is printed, and the `break` statement exits the `switch`."
    },
    {
        "question": "What is the result of the following code?\n```java\nboolean flag = (10 > 5) ? true : false;\nSystem.out.println(flag);\n```",
        "options": ["true", "false", "10 > 5 ? true : false", "Error"],
        "answer": 0,
        "explanation": "The ternary operator evaluates `10 > 5` as `true`, so the value of `flag` is `true`, and it is printed."
    },
    {
        "question": "What does the following code print?\n```java\nint x = 0;\nif (x > 0) {\n    System.out.println(\"Positive\");\n} else if (x < 0) {\n    System.out.println(\"Negative\");\n} else {\n    System.out.println(\"Zero\");\n}\n```",
        "options": ["Positive", "Negative", "Zero", "Error"],
        "answer": 2,
        "explanation": "The value of `x` is 0, so none of the `if` or `else if` conditions are true. The control goes to the `else` block, printing 'Zero'."
    },
    {
        "question": "What will the following code print?\n```java\nint a = 7;\nint b = 3;\nSystem.out.println(a % b);\n```",
        "options": ["1", "2", "3", "Error"],
        "answer": 1,
        "explanation": "The `%` operator returns the remainder of the division. Dividing 7 by 3 gives a quotient of 2 and a remainder of 1, which is printed."
    },
    {
        "question": "Which of the following is NOT allowed in a `switch` statement in Java?",
        "options": [
            "String as case values",
            "Fall-through without 'break'",
            "Duplicate case values",
            "Case values of type int"
        ],
        "answer": 2,
        "explanation": "The `switch` statement in Java does not allow duplicate case values as it leads to ambiguity in the code. All other options are valid."
    }
]
