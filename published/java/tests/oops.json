[
    {
        "question": "What will be the output of the following code?",
        "code": "<pre><code class='language-java'>class A {\n    void show() {\n        System.out.println(\"A\");\n    }\n}\nclass B extends A {\n    void show() {\n        System.out.println(\"B\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        A obj = new B();\n        obj.show();\n    }\n}</code></pre>",
        "options": ["A", "B", "Compilation error", "Runtime error"],
        "answer": 1,
        "explanation": "Due to method overriding and dynamic method dispatch, the show() method of class B is called."
    },
    {
        "question": "What is the output of the following code?",
        "code": "<pre><code class='language-java'>class Parent {\n    Parent() {\n        System.out.println(\"Parent Constructor\");\n    }\n}\nclass Child extends Parent {\n    Child() {\n        System.out.println(\"Child Constructor\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        new Child();\n    }\n}</code></pre>",
        "options": ["Parent Constructor", "Child Constructor", "Parent Constructor\nChild Constructor", "Compilation error"],
        "answer": 2,
        "explanation": "The Parent constructor is called first due to constructor chaining before the Child constructor executes."
    },
    {
        "question": "What will happen when executing this code?",
        "code": "<pre><code class='language-java'>abstract class A {\n    abstract void show();\n}\nclass B extends A {\n    void show() {\n        System.out.println(\"B\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        A obj = new B();\n        obj.show();\n    }\n}</code></pre>",
        "options": ["B", "A", "Compilation error", "Runtime error"],
        "answer": 0,
        "explanation": "Abstract class A provides an abstract method, which is implemented in class B. Hence, 'B' is printed."
    },
    {
        "question": "What will be the output of this encapsulation example?",
        "code": "<pre><code class='language-java'>class Person {\n    private String name;\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Person p = new Person();\n        p.setName(\"John\");\n        System.out.println(p.getName());\n    }\n}</code></pre>",
        "options": ["John", "null", "Error", "Compilation error"],
        "answer": 0,
        "explanation": "Encapsulation ensures the private variable 'name' is accessed via getter and setter methods, printing 'John'."
    }
]
