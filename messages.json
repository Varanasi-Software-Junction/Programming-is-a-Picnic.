{
  "2025-06-17": "Always write code as if the person who ends up maintaining it will be a violent psychopath who knows where you live.\nExample:\nuser_age = 25  # ✅ Clear and meaningful variable name",
  "2025-06-18": "Debugging is like being the detective in a crime movie where you are also the murderer.\nExample:\ntry:\n    result = 5 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")",
  "2025-06-19": "Use list comprehensions — they’re cleaner and faster.\nExample:\nsquares = [i * i for i in range(5)]\nprint(squares)",
  "2025-06-20": "Use enumerate() instead of range(len()).\nExample:\nfruits = ['apple', 'banana', 'mango']\nfor index, fruit in enumerate(fruits):\n    print(f\"{index}: {fruit}\")",
  "2025-06-21": "Use 'with' when working with files. It auto-closes the file.\nExample:\nwith open(\"data.txt\", \"r\") as file:\n    content = file.read()\nprint(content)",
  "2025-06-22": "Use f-strings for clean and efficient string formatting.\nExample:\nname = \"Shubham\"\nage = 22\nprint(f\"Hello, my name is {name} and I am {age} years old.\")",
  "2025-06-23": "Avoid mutable default arguments like lists or dicts in functions.\nExample:\ndef add_item(item, items=None):\n    if items is None:\n        items = []\n    items.append(item)\n    return items\nprint(add_item('Python'))",
  "2025-06-24": "Always add a docstring to your functions.\nExample:\ndef greet(name):\n    \"\"\"Returns a greeting for the given name.\"\"\"\n    return f\"Hello, {name}!\"\nprint(greet(\"Shubham\"))",
  "2025-06-25": "Use zip() to iterate over multiple lists in parallel.\nExample:\nnames = [\"Alice\", \"Bob\"]\nscores = [90, 85]\nfor name, score in zip(names, scores):\n    print(f\"{name} scored {score}\")",
  "2025-06-26": "Use sets instead of lists for faster membership tests.\nExample:\nitems = {1, 2, 3, 4, 5}\nif 3 in items:\n    print(\"Found!\")",
  "2025-06-27": "Use try-except blocks to handle exceptions gracefully.\nExample:\ntry:\n    number = int(input(\"Enter a number: \"))\nexcept ValueError:\n    print(\"Please enter a valid integer.\")",
  "2025-06-28": "Split large problems into small, single-purpose functions.\nExample:\ndef get_name():\n    return input(\"Enter your name: \")\ndef greet(name):\n    print(f\"Hello, {name}!\")\ngreet(get_name())",
  "2025-06-29": "Use virtual environments to manage project dependencies.\nExample (Terminal):\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate",
  "2025-06-30": "Use the time module to measure execution time for performance profiling.\nExample:\nimport time\nstart = time.time()\nsum = 0\nfor i in range(1000000):\n    sum += i\nend = time.time()\nprint(f\"Execution time: {end - start:.2f} seconds\")"
}
